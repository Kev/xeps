<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>MUC2</title>
  <abstract>This document defines XMPP protocol  for multi-user chat for text messages and sharing other information such as images.   The protocol includes core chatroom features such as room topics and invitations and defines a strong room control model, including the ability to kick and ban users, to name room moderators and administrators, to require membership or passwords in order to join the room.  The protocol aims to maximise use of standard XMPP building blocks and in particular makes use of PubSub and MAM.</abstract>
  &LEGALNOTICE;
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0313</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MUC2</shortname>
  &ksmithisode;
  <revision>
    <version>0.0.1</version>
    <date>2015-06-26</date>
    <initials>kis</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>
    Multi-user chat is a major application of XMPP that was standardized in &xep0045; (MUC). This ocument specifies a MUC2 protocol, intended as a replacement for MUC. MUC2 covers newer use cases that have appeared over the thirteen years since MUC was first published and takes advantage of the newer protocols and technologies developed in the interim (particularly &xep0060; and &xep0313;).  The protocol includes core chatroom features such as room topics and invitations and defines a strong room control model, including the ability to kick and ban users, to name room moderators and administrators, and to require membership in order to join the room.  MUC2 also aims to support communication of rich information in additon to MUC.
  </p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <ul>
    <li>MUC occupancy persisting beyond clients being offline.</li>
    <li>Nick sharing, with well-defined rules and all resources individually addressable</li>
    <li>Presenceless MUC</li>
    <li>Fast resync</li>
    <li>Invisible Observers</li>
    <li>Config can be observed from outside the room, given appropriate configuration (e.g. list of occupants, reading messages, etc.)</li>
    <li>Large Open MUCs should not allow JIDs to be scraped</li>
    <li>Play nicely with MAM (no duplicate messages)</li>
    <li>Know what rooms you're in, globally</li>
    <li>Desirable: Easier FMUC</li>
    <li>Desirable: Duplicate traffic reduction</li>
 </ul>
</section1>

<section1 topic="Relationship to MUC" anchor="oldmuc">
  <p>
    This specification is intended as a replacement for MUC specified in &xep0045;.

    ** this text is in the wrong place ** MUC exists and works, but has a number of sharp edges, and doesn't map well onto some modern use cases. This spec defines a protocol that can address current requirements, is hopefully flexible enough to also address future requirements in this area, and that builds on existing XMPP mechanisms such as PubSub and MAM to minimise the work required to implement it (being less work to implement for clients and servers than MUC, if they already implement the dependencies)

    There are a number of drivers for this specification:
  </p>
  <ul>
    <li>It is not practical to address a number of the requirements listed above with MUC or extensions to MUC. </li>
    <li>MUC was developed as a complete service.   Subsequent to MUC,  PubSub and MAM have been developed and it is desirable that multi-user chat utilizes these building blocks.</li>
  </ul>
  <p>
    It is anticipated that there will significant co-existence with MUC and this specification is designed so that:
  </p>
  <ul>
    <li>XMPP Clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP Servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ul>
  <p>Where servers wish to expose both MUC2 and MUC representations of rooms, they SHOULD do so by having MUC and MUC2 on different domains. The MUC2 SHOULD include a reference to the MUC mirror, so that clients understanding protocols can choose to only show one copy of the service.</p>
</section1>


<section1 topic='Concepts' anchor='reqs'>
  <p>(Some of these concepts discuss their position in terms of MUC, which seems useful initially but we'd probably refine away as we approached Draft)</p>
  <ul>
    <li>MUC2 rooms will be hosted on a MUC2 domain, e.g. `rooms.example.com`, which is discoverable through disco[ref] and through disco (&xep0030;) each room on the service may then be discovered and queried. This is the same model as MUC.</li>
    <li>Re-using the model from PEP[ref] where every user JID (`user@server`) is its own pubsub service, in MUC2 each room (`room@rooms.server`) is a pubsub service.</li>
    <li>Where appropriate, some of the protocol from &xep0060; is elided</li>
    <li>Each room's pubsub service will contain several nodes that are well-defined in this document, with each node devoted to the storage of a distinct type of room data. As each room is a pubsub service, it will also be possible for future specifications or proprietary extensions to use additional (effectively namespaced) nodes as required to store information not specified in this document, and this allows future extensibility. The standard nodes are (noting that not every room will necessarily use each node):
    <ul>
        <li>'muc2#messages' for publishing messages. Each item of this node will contain one message, containing each of the distributed payloads (described in ###).</li>
        <li>'muc2#subject' for publishing the room subject.</li>
        <li>'muc2#occupants' for publishing the list of occupants of the room, including their details (e.g. the occupant's JID in an appropriately configured room).</li>
        <li>'muc2#presences' for publishing occupants' presence. This is a significant departure from MUC, where occupancy and presence were tightly coupled - in MUC2 it is possible to have a 'presenceless room' by not using this node. As another significant departure from MUC, where an occupant is active in the room from multiple resources, each resource's presence is individually available, as is normal outside MUC.</li>
        <li>'muc2#config' for storing the room configuration. In another departure from MUC, by storing configuration in the same manner as other data, it is possible to tweak access rights such that occupants are able to read the room configuration if desired, and notifications of configuration changes fall out 'for free'.</li>
    </ul></li>
    <li>Affiliations to the nodes are, by default, tied together as affiliations on the room itself rather than individual nodes, such that allowing or denying access to a room is a single affiliation change.</li>
    <li>&xep0313; (MAM) is used for all history access, with each node being individually addressable for MAM queries. This simplifies implementation compared to MUC (which had its own, limited, history retrieval mechanism).</li>
    <li>A client can achieve a 'quick resync' of a node by requesting just those changes it has not yet received, using standard MAM protocol. This solves the old MUC issue of either receiving duplicate messages when rejoining a room, or of potentially missing messages.</li>
    <li>As MAM is used for history, only those nodes that have a 'current value' need to store any items in them - e.g. 'muc2#presence' and 'muc2#subject' would store their current values (with older values being queryable through MAM), while 'muc2#messages' would store no items.</li>
    <li>MUC2 decouples addressing of occupants from their nicknames, such that nickname changes don't affect addressing, adding flexibility.</li>
    <li>Each occupant is addressible by a single JID - in non-anonymous rooms these are just the ocucpant's 'real' JID such that messages between users are only mediated by the MUC2 service in semi-anonymous rooms.</li>
    <li>In semi-anonymous rooms, occupants are granted a proxy JID by the service, such that queries and messages between users are possible.</li>
    <li>A user's occupancy of a room outlives their presence session. A user who is offline will have no presence in the room, but will still be listed as an occupant. Thus when coming online or going offline, a room only needs to receive a standard presence from the user, not any 'join' payloads. This is a significan departure from MUC.</li>
  </ul>
</section1>

<section1 topic="Use of PubSub &amp; MAM" anchor="pubsub">
  <p>
    MUC2 makes use of &xep0060; for core communication and access control, and &xep0313; for message storage to provide chat history services.  This section outlines how this is achieved, and considers how a MUC room coven@chat.shakespeare.lit is provided.
  </p>
  <section2 topic="MUC2 and PubSub" anchor="basic_pubsub">
    <p>
      MUC2 is based upon domains proving an XMPP MUC2 service.  So a domain rooms.shakespeare.lit would be used to provide the example MUC2 room and is a MUC2 domain. Note that although PubSub communication is used, a domain used for MUC2 is a MUC2 domain and not a standard &xep0060; domain. (Note that, like in MUC, there is no requirement on the naming of these domains, and the label 'rooms' and that it is a subdomain of a 'shakespeare.lit' service is purely an example)
    </p>
    <p>
      Every MUC2 room is an addressable PubSub service (with additional MUC2 semantics) that will be addressed by an XMPP client using a bare JID,for example coven@rooms.shakespeare.lit. Most communication with the MUC2 service follows &xep0060;; where new protocol is not introduced in this document, the &xep0060; protocol is used and must be adhered to. While &xep0060; is used as the basis for the MUC2 model, some protocol is added or optimised in this document for the MUC2 use cases. For example, when a message is published to the 'muc2#messages' node, a message unlike a &xep0060; payload is distributed to occupants (more akin to the old &xep0045;). [TODO: Do we actually want this, or do we want to easily distinguish MUC/MUC2 at the top level?]
    </p>
  </section2>
  <section2 topic="Standard Nodes and Behaviour" anchor="standard_nodes">
    <p>
      Each of the types of data used in a MUC2 room are stored in a pubsub node. Future specifications may define additional nodes.
    </p>
    <section3 topic="The Messages Node" anchor="node_messages">
      <p>
      </p>
    </section3>
    <section3 topic="The Subject Node" anchor="node_messages">
      <p>
      </p>
    </section3>
    <section3 topic="The Occupants Node" anchor="node_messages">
      <p>
      </p>
    </section3>
    <section3 topic="The Presence Node" anchor="node_messages">
      <p>
      </p>
    </section3>
    <section3 topic="The Configuration Node" anchor="node_messages">
      <p>
      </p>
    </section3>
  </section2>
</section1>
<section1 topic='Discovery' anchor='discovery'>
  <section2 topic='Discovering a MUC2 service' anchor='disco-service'>
    <p>To determine if a domain hosts a MUC2 service, a &xep0030; info query should be sent in the usual manner</p>
      <example caption="Entity queries a service" ><![CDATA[
<iq from='romeo@shakespeare.lit/intibo24'
    id='lx09df27'
    to='rooms.shakespeare.lit'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
]]></example>
    <p>The MUC2 service then MUST return its identity and the features it supports, which MUST include the 'urn:xmpp:muc2:0' feature, and the identity MUST have a category of 'conference' and a type of 'text'. TODO: do we want a different type?</p>
    <example caption="Service responds with Disco Info result" ><![CDATA[
<iq from='rooms.shakespeare.lit'
    id='lx09df27'
    to='romeo@shakespeare.lit/intibo24'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity
        category='conference'
        name='Shakespearean Chat Service'
        type='text'/>
    <feature var='urn:xmpp:muc2:0'/>
    <x xmlns='jabber:x:data' type='result'>
      <field var='FORM_TYPE' type='hidden'>
        <value>urn:xmpp:muc2:0#serviceinfo</value>
      </field>
      <field var='muc2#muc_mirror' 
             label='Location of MUC mirror service'>
        <value>chat.shakespeare.lit</value>
      </field>
    </x>
  </query>
</iq>
]]></example>
    <p>If the MUC2 service is mirrorred to a MUC service for backwards-compatibility, this SHOULD be signaled by the inclusion of a 'muc2#muc_mirror' field, the value of which should be the mirrored MUC domain, in the extended disco results in a form whose type value is 'urn:xmpp:muc2:0#serviceinfo'. Note that the MUC2 service itself doesn't advertise support for &xep0313;, nor is support for generic &xep0060; advertised. For a list of the other standard data form variables, see ### TODO (If there are any).</p>
  </section2>
  <section2 topic='Listing rooms on a service' anchor='disco-room-list'>
    <p>disco#items</p>
      <example caption="" ><![CDATA[

]]></example>
  </section2>
  <section2 topic='Discovering room information' anchor='disco-room-info'>
    <p>disco#info</p>
      <example caption="" ><![CDATA[

]]></example>
  </section2>
  <section2 topic='Discovering room nodes' anchor='disco-room-nodes'>
    <p>disco#items. Lets you see which nodes a room has ###TODO: Discussion</p>
      <example caption="" ><![CDATA[

]]></example>
  </section2>
  <section2 topic='Discovering room occupants' anchor='disco-occupants'>
    <p>*Not* done with disco#items (which returns nodes), instead query items on the muc2#occupants node (if you're allowed).</p>
      <example caption="" ><![CDATA[

]]></example>
  </section2>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>
    <section3 topic='Entering a room' anchor='usecase-user-enter'>
      <p>Send pubsub subscriptionish stanza to the room. By default subscribes to all the 'standard' nodes, but can specify just those required. Server injects a new item into #occupants automatically.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Coming online' anchor='usecase-user-presence'>
      <p>Suggest: roster subscriptions, although directed presence will work. Come online, send presence to the room. Room publishes to #presences. Multiple presences for multiple resources of user.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Going offline' anchor='usecase-user-offline'>
      <p>Go offline, send presence to the room. Room retracts item, with notifications.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Sending Messages' anchor='usecase-user-messages'>
      <p>Same as MUC (message=groupchat+body), but message comes from the room, and has markup to show who sent it.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Leaving a room' anchor='usecase-user-leaving'>
      <p>Send pubsubbish unsubscribe to room. Room retracts #occupants #presence. This is a persistent leaving of room, not just going offline.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Inviting a Contact To a Room' anchor='usecase-user-invite'>
      <p>User sends to room requesting invite, receives it, forwards it to contact. Solves issues with both directed and mediated invites. ### TODO: Dave had a point about contact preverification about users' invites. Discuss.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Sending Private Messages' anchor='usecase-user-private-messages'>
      <p>Users' JIDs are available from #occupants (may be proxied if semi-anonymous), just send normal chats.</p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='' anchor='usecase-user-'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
  </section2>
  <section2 topic='Administrative Use Cases' anchor='usecases-admin'>
    <section3 topic='Checking For Permission To Create a Room' anchor='usecase-admin-check-create'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Creating a Room' anchor='usecase-admin-create'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Configuring a Room' anchor='usecase-admin-'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Destroying a Room' anchor='usecase-admin-destroy'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Modifying User Affiliations' anchor='usecase-admin-affiliations'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>
    <section3 topic='Removing a User From a Room (Kicking)' anchor='usecase-admin-kick'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>


    <section3 topic='' anchor='usecase-admin-'>
      <p></p>
        <example caption="" ><![CDATA[

]]></example>
    </section3>

  </section2>
  
</section1>

<section1 topic='Configuration options' anchor='config'>
  <section2 topic='Anonymity' anchor="config_anonymity">
    <p>TODO: SemiAnon/NonAnom</p>
  </section2>
</section1>

<!--<section1 topic='Business Rules' anchor='rules'>
  <ul>
    <li>.</li>
  </ul>
</section1>-->
<!--<section1 topic='Implementation Notes' anchor='impl'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>OPTIONAL.</p>
</section1>-->
<section1 topic='Security Considerations' anchor='security'>
  <p>This specification doesn't add additional security considerations beyond those of its dependencies.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>Needs a namespace.</p>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <p>When advanced.</p>
</section1>
</xep>
