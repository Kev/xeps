<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>MUC2</title>
  <abstract>This document provides a protocol that can be used for multi-user chat for text messages and sharing other information such as images.   The protocol includes core chatroom features such as room topics and invitations and defines a strong room control model, including the ability to kick and ban users, to name room moderators and administrators, to require membership or passwords in order to join the room.  The protocol aims to maximise use of standard XMPP building blocks and in particular makes use of PubSub and MAM.</abstract>
  &LEGALNOTICE;
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0313</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MUC2</shortname>
  &ksmithisode;
  <revision>
    <version>0.0.1</version>
    <date>2015-06-26</date>
    <initials>kis</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>** this text is in the wrong place ** MUC exists and works, but has a number of sharp edges, and doesn't map well onto some modern use cases. This spec defines a protocol that can address current requirements, is hopefully flexible enough to also address future requirements in this area, and that builds on existing XMPP mechanisms such as pubsub and MAM to minimise the work required to implement it (being less work to implement for clients and servers than MUC, if they already implement the dependencies).</p>
</section1>

<section1 topic='Requirements' anchor='reqs'>
  <p>MUC occupancy persisting beyond clients being offline.
     Nick sharing, with well-defined rules and all resources individually addressable
     Presenceless MUC
     Fast resync
     Invisible Observers
     Config can be observed from outside the room, given appropriate configuration (e.g. list of occupants, reading messages, etc.)
     Large Open MUCs should not allow JIDs to be scraped</p>
</section1>
  
<section1 topic="Relationship to MUC" anchor="oldmuc">
  <p>
    This specification is intended as a replacement for MUC specified in XEP-0045, refernced here as MUC.  There are a number of drivers for this specicification:
  </p>
  <ol start="1.">
    <li>It is not practical to address a number of the requirements listed above with MUC or extensions to MUC. </li>
    <li>MUC was developed as a complete service.   Subsequent to MUC,  PubSub and MAM have been developed and it is desirable that mult-user chat utilizes these building blocks.</li>
  </ol>
  <p>
    It is anticipated that there will significant co-existence with MUC and this specification is designed so that:
  </p>
  <ol start="1.">
    <li>XMPP Clients can implement MUC and this specification in a way that provides a coherent user experience.</li>
    <li>XMPP Servers can implement this specification and also provide a MUC interface in order to support clients that only implement MUC.</li>
  </ol>
</section1>  


<section1 topic='Concepts' anchor='reqs'>
  <p>Domain hosting rooms, muc2.example.com.
     Each room a pubsub service (room@muc2.example.com).
     Several well-known nodes comprise the room.
     One node for subject changes.
     One node for messages.
     Affiliations of nodes tied together somehow (Central affiliation list, and then by reference?).
     Presence in a node.
     Each node in MAM.
     Resync by doing a MAM query across all the nodes you care about to process diffs (also for 'last 100 messages'), or just a full fetch of pubsub items (e.g. for current presence).
     Addressing and nicknames are split. Changing nicknames doesn't affect addresses. In a non-anonymous room, full JIDs are probably used. In an anonymous room, the room will have to magic them away.
     </p>
</section1>


<section1 topic='Discovery' anchor='discovery'>
  <p>Find domain.</p>
</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Initial Join' anchor='initial'>
    <p></p>
    <example caption="Romeo joins" ><![CDATA[

]]></example>
  </section2>
  <section2 topic='Check if allowed to create room' anchor='create-check'>
    <p></p>
    <example caption="Romeo joins" ><![CDATA[

]]></example>
  </section2>
  
</section1>


<!--<section1 topic='Business Rules' anchor='rules'>
  <ul>
    <li>.</li>
  </ul>
</section1>-->
<!--<section1 topic='Implementation Notes' anchor='impl'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>OPTIONAL.</p>
</section1>
<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>OPTIONAL.</p>
</section1>-->
<section1 topic='Security Considerations' anchor='security'>
  <p>This specification doesn't add additional security considerations beyond those of its dependencies.</p>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>Needs a namespace.</p>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <p>When advanced.</p>
</section1>
</xep>
